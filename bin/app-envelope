#!/usr/bin/env python

import apprentice
import numpy as np

def readObs(fname):
    with open(fname) as f:
        r=[l.strip().split()[0] for l in f if not l.startswith("#")]
    return r

if __name__ == "__main__":
    import sys
    import time


    import optparse, os, sys
    op = optparse.OptionParser(usage=__doc__)
    op.add_option("-v", "--debug", dest="DEBUG", action="store_true", default=False, help="Turn on some debug messages")
    op.add_option("-w", dest="WEIGHTS", default=None, help="Weight file to choose observables to predict (default: %default)")
    op.add_option("-o", "--output", dest="OUTPUT", default="pred.yoda", help="Output file name (default: %default)")
    opts, args = op.parse_args()


    binids, RA = apprentice.tools.readApprox(args[0])

    hnames = sorted(list(set([b.split("#")[0] for b in binids])))
    observables = [x for x in list(set(readObs(opts.WEIGHTS))) if x in hnames] if opts.WEIGHTS is not None else hnames

    import json
    with open(args[0]) as f:
        rd = json.load(f)
        xmin = rd["__xmin"]
        xmax = rd["__xmax"]

    # with open(args[1]) as f:
        # rd2= json.load(f)
        # xmin2= rd["__xmin"]
        # xmax2= rd["__xmax"]
    # from IPython import embed
    # embed()
    # exit(1)

    import yoda
    Yup, Ydn = [], []
    for obs in observables:
        bids = [x for x in binids if x.startswith(obs)]
        bids = sorted(bids, key=lambda x: int(x.split("#")[-1]))
        LOW  = [xmin[binids.index(x)] for x in bids]
        HIGH = [xmax[binids.index(x)] for x in bids]
        DX = [0.5*(b-a) for a, b in zip(LOW, HIGH)]
        X  = [l+dx       for l, dx in zip(LOW, DX)]
        VMIN = [RA[binids.index(x)].vmin for x in bids]
        VMAX = [RA[binids.index(x)].vmax for x in bids]

        Pup = [yoda.Point2D(x,y,dx,0) for x,y,dx in zip(X,VMAX,DX)]
        Sup = yoda.Scatter2D(Pup, obs, obs)
        Yup.append(Sup)
        Pdn = [yoda.Point2D(x,y,dx,0) for x,y,dx in zip(X,VMIN,DX)]
        Sdn = yoda.Scatter2D(Pdn, obs, obs)
        Ydn.append(Sdn)
    yoda.write(Yup, opts.OUTPUT.replace(".yoda","_up.yoda"))
    yoda.write(Ydn, opts.OUTPUT.replace(".yoda","_dn.yoda"))
